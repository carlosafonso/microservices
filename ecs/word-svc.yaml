Parameters:
  ClusterArn:
    Type: String
  ClusterName:
    Type: String
  ClusterSecurityGroupId:
    Type: String
  WordImageUri:
    Type: String
  LogGroup:
    Type: String
  PrivateSubnetAId:
    Type: String
  PrivateSubnetBId:
    Type: String
  ServiceRegistryNamespaceId:
    Type: String
  TaskExecutionRoleArn:
    Type: String
  TaskIamRoleArn:
    Type: String

Resources:
  WordServiceRegistry:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      DnsConfig:
        DnsRecords:
          - TTL: 15
            Type: A
        NamespaceId: !Ref ServiceRegistryNamespaceId
        RoutingPolicy: MULTIVALUE
      Name: word

  WordTaskDef:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Name: word
          Image: !Ref WordImageUri
          DependsOn:
            - Condition: HEALTHY
              ContainerName: envoy
          Environment:
            - Name: RANDOM_ERROR_PROBABILITY
              Value: 0.25
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: word
          PortMappings:
            - ContainerPort: 80
          StopTimeout: 5
        - Name: envoy
          Image: public.ecr.aws/appmesh/aws-appmesh-envoy:v1.16.1.0-prod
          Environment:
            - Name: APPMESH_RESOURCE_ARN
              Value: !Ref VirtualNode
            - Name: ENVOY_LOG_LEVEL
              Value: debug
            - Name: ENABLE_ENVOY_XRAY_TRACING
              Value: 1
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: word
          HealthCheck:
            Command: [ "CMD-SHELL", "curl -s http://localhost:9901/server_info | grep state | grep -q LIVE" ]
            Interval: 5
            Retries: 2
            StartPeriod: 10
            Timeout: 3
          User: 1337
        - Name: xray-daemon
          Image: public.ecr.aws/xray/aws-xray-daemon:alpha
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: frontend
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: !Ref TaskExecutionRoleArn
      NetworkMode: awsvpc
      ProxyConfiguration:
        ContainerName: envoy
        ProxyConfigurationProperties:
          - Name: IgnoredUID
            Value: 1337
          - Name: IgnoredGID
            Value: ''
          - Name: AppPorts
            Value: 80
          - Name: ProxyIngressPort
            Value: 15000
          - Name: ProxyEgressPort
            Value: 15001
          - Name: EgressIgnoredPorts
            Value: ''
          - Name: EgressIgnoredIPs
            Value: '169.254.170.2,169.254.169.254'
        Type: APPMESH
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !Ref TaskIamRoleArn

  WordService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ClusterArn
      DesiredCount: 2
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref ClusterSecurityGroupId
          Subnets:
            - !Ref PrivateSubnetAId
            - !Ref PrivateSubnetBId
      ServiceRegistries:
        - RegistryArn: !GetAtt WordServiceRegistry.Arn
      TaskDefinition: !Ref WordTaskDef

  WordSvcScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 10
      MinCapacity: 2
      ResourceId: !Sub service/${ClusterName}/${WordService.Name}
      RoleARN: !Sub 'arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService'
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  WordSvcScaleUpPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: WordSvcScaleUp
      PolicyType: StepScaling
      ScalingTargetId: !Ref WordSvcScalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        StepAdjustments:
          - MetricIntervalLowerBound: 0
            ScalingAdjustment: 2

  WordSvcScaleDownPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: WordSvcScaleDown
      PolicyType: StepScaling
      ScalingTargetId: !Ref WordSvcScalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        StepAdjustments:
          - MetricIntervalUpperBound: 0
            ScalingAdjustment: -1

  WordSvcHighCpuAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - !Ref WordSvcScaleUpPolicy
      ComparisonOperator: GreaterThanOrEqualToThreshold
      DatapointsToAlarm: 1
      Dimensions:
        - Name: ClusterName
          Value: !Ref ClusterName
        - Name: ServiceName
          Value: !GetAtt WordService.Name
      EvaluationPeriods: 1
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Period: 60
      Statistic: Average
      Threshold: 30

  WordSvcLowCpuAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - !Ref WordSvcScaleDownPolicy
      ComparisonOperator: LessThanThreshold
      DatapointsToAlarm: 1
      Dimensions:
        - Name: ClusterName
          Value: !Ref ClusterName
        - Name: ServiceName
          Value: !GetAtt WordService.Name
      EvaluationPeriods: 1
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Period: 60
      Statistic: Average
      Threshold: 15

  VirtualNode:
    Type: AWS::AppMesh::VirtualNode
    Properties:
      MeshName: microservices
      Spec:
        Listeners:
          - PortMapping:
              Port: 80
              Protocol: http
        ServiceDiscovery:
          AWSCloudMap:
            NamespaceName: microservices
            ServiceName: word
      VirtualNodeName: word

  VirtualService:
    Type: AWS::AppMesh::VirtualService
    Properties:
      MeshName: microservices
      Spec:
        Provider:
          VirtualNode:
            VirtualNodeName: !GetAtt VirtualNode.VirtualNodeName
      VirtualServiceName: word.microservices

Outputs:
  ServiceName:
    Value: !GetAtt WordService.Name
