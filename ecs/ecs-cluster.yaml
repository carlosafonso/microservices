Parameters:
  VpcId:
    Type: String
  PublicSubnetAId:
    Type: String
  PublicSubnetBId:
    Type: String
  PrivateSubnetAId:
    Type: String
  PrivateSubnetBId:
    Type: String

Resources:
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the frontend ALB
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
      VpcId: !Ref VpcId

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Subnets:
        - !Ref PublicSubnetAId
        - !Ref PublicSubnetBId
      Type: application

  ALBTargetGroupBlue:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckPort: traffic-port
      HealthCheckProtocol: HTTP
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 5
      TargetType: ip
      UnhealthyThresholdCount: 2
      VpcId: !Ref VpcId

  ALBTargetGroupGreen:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckPort: traffic-port
      HealthCheckProtocol: HTTP
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 5
      TargetType: ip
      UnhealthyThresholdCount: 2
      VpcId: !Ref VpcId

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroupBlue
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP

  ServiceRegistryNamespace:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Name: microservices
      Vpc: !Ref VpcId

  TaskIamRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": { "Service": [ "ecs-tasks.amazonaws.com" ]},
              "Action": [ "sts:AssumeRole" ]
            }
          ]
        }
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSQSFullAccess

  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  ClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group to be used within the cluster
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref ALBSecurityGroup
          IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          Description: Traffic from the ALB
      VpcId: !Ref VpcId

  ClusterSecurityGroupSelfIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref ClusterSecurityGroup
      SourceSecurityGroupId: !Ref ClusterSecurityGroup
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      Description: Traffic from the other services

  WorkerNodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
      Policies:
        - PolicyName: 'SessionsManagerPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'ssm:UpdateInstanceInformation'
                  - 'ssmmessages:CreateControlChannel'
                  - 'ssmmessages:CreateDataChannel'
                  - 'ssmmessages:OpenControlChannel'
                  - 'ssmmessages:OpenDataChannel'
                Resource: '*'
              - Effect: 'Allow'
                Action: 's3:GetEncryptionConfiguration'
                Resource: '*'

  WorkerNodeInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!Ref WorkerNodeInstanceRole]

  WorkerNodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group to be used in the ECS cluster worker nodes
      VpcId: !Ref VpcId

  WorkerNodeLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        IamInstanceProfile:
          Name: !Ref WorkerNodeInstanceProfile
        ImageId: '{{resolve:ssm:/aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id:52}}'
        NetworkInterfaces:
          - DeviceIndex: 0
            AssociatePublicIpAddress: true
            Groups:
              - !Ref WorkerNodeSecurityGroup
            DeleteOnTermination: true
        UserData:
          # See comment in "Cluster" to understand why we're hardcoding the
          # cluster name.
          Fn::Base64:
            !Sub |
            #!/bin/bash
            echo "ECS_CLUSTER=${AWS::StackName}-MicroservicesCluster" >> /etc/ecs/ecs.config

  WorkerNodeASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MaxSize: 10
      MinSize: 0
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandBaseCapacity: 0
          OnDemandPercentageAboveBaseCapacity: 0
          SpotAllocationStrategy: lowest-price
          SpotInstancePools: 3
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref WorkerNodeLaunchTemplate
            Version: !GetAtt WorkerNodeLaunchTemplate.LatestVersionNumber
          Overrides:
            - InstanceType: m5.large
            - InstanceType: m5a.large
            - InstanceType: m5d.large
            - InstanceType: m5ad.large
      MetricsCollection:
        - Granularity: 1Minute
      VPCZoneIdentifier:
        - !Ref PrivateSubnetAId
        - !Ref PrivateSubnetBId

  WorkerNodeCapacityProvider:
    Type: AWS::ECS::CapacityProvider
    Properties:
      AutoScalingGroupProvider:
        AutoScalingGroupArn: !Ref WorkerNodeASG
        ManagedScaling:
          Status: ENABLED
          TargetCapacity: 100

  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      # The way CloudFormation currently supports Capacity Providers forces us
      # to define a static cluster name, as otherwise this would introduce a
      # circular dependency.
      # (Cluster <- LaunchTemplate <- ASG <- Capacity Provider <- Cluster)
      ClusterName: !Sub ${AWS::StackName}-MicroservicesCluster
      CapacityProviders:
        - !Ref WorkerNodeCapacityProvider
      DefaultCapacityProviderStrategy:
        - CapacityProvider: !Ref WorkerNodeCapacityProvider
          Weight: 1

  JobQueue:
    Type: AWS::SQS::Queue

Outputs:
  ALB:
    Value: !Ref ALB
  ALBFullName:
    Value: !GetAtt ALB.LoadBalancerFullName
  ALBDNSName:
    Value: !GetAtt ALB.DNSName
  ALBBlueTargetGroupArn:
    Value: !Ref ALBTargetGroupBlue
  ServiceRegistryNamespaceId:
    Value: !Ref ServiceRegistryNamespace
  ClusterName:
    Value: !Ref Cluster
  ClusterArn:
    Value: !GetAtt Cluster.Arn
  ClusterSecurityGroupId:
    Value: !Ref ClusterSecurityGroup
  JobQueueName:
    Value: !GetAtt JobQueue.QueueName
  JobQueueUrl:
    Value: !Ref JobQueue
  TaskExecutionRoleArn:
    Value: !Ref TaskExecutionRole
  TaskIamRoleArn:
    Value: !Ref TaskIamRole
  WorkerNodeASGName:
    Value: !Ref WorkerNodeASG
