Parameters:
  AL2AmiId:
    Type: 'AWS::EC2::Image::Id'
  CodeCommitRepositoryArn:
    Type: String
  CodeCommitRepositoryName:
    Type: String
  FrontendServiceEcrRepoName:
    Type: String
  SourceRepo:
    Type: String
  SubnetId:
    Type: String
  VpcId:
    Type: String

Resources:
  AutomationInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group to be used in the automation EC2 instance
      VpcId: !Ref VpcId

  AutomationInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: 'CodeCommitRepoAccessPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'codecommit:ListRepositoriesForApprovalRuleTemplate'
                  - 'codecommit:CreateApprovalRuleTemplate'
                  - 'codecommit:UpdateApprovalRuleTemplateName'
                  - 'codecommit:GetApprovalRuleTemplate'
                  - 'codecommit:ListApprovalRuleTemplates'
                  - 'codecommit:DeleteApprovalRuleTemplate'
                  - 'codecommit:ListRepositories'
                  - 'codecommit:UpdateApprovalRuleTemplateContent'
                  - 'codecommit:UpdateApprovalRuleTemplateDescription'
                Resource: '*'
              - Effect: 'Allow'
                Action: 'codecommit:*'
                Resource: !Ref CodeCommitRepositoryArn
        - PolicyName: 'SessionsManagerPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'ssm:UpdateInstanceInformation'
                  - 'ssmmessages:CreateControlChannel'
                  - 'ssmmessages:CreateDataChannel'
                  - 'ssmmessages:OpenControlChannel'
                  - 'ssmmessages:OpenDataChannel'
                Resource: '*'
              - Effect: 'Allow'
                Action: 's3:GetEncryptionConfiguration'
                Resource: '*'
        - PolicyName: 'EcrRepoAccessPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 'ecr:*'
                Resource: '*'

  AutomationInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!Ref AutomationInstanceRole]

  AutomationInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AL2AmiId
      IamInstanceProfile: !Ref AutomationInstanceProfile
      InstanceType: m5.large
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet:
            - !Ref AutomationInstanceSecurityGroup
          SubnetId: !Ref SubnetId
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            set -euxo pipefail
            sudo yum update -y

            #
            # Make an initial push to the frontend service CodeCommit source
            # repo created as part of this stack.
            #

            # Install git, pip and the CodeCommit helper.
            sudo yum install -y git
            curl -O https://bootstrap.pypa.io/pip/2.7/get-pip.py
            python get-pip.py
            pip install git-remote-codecommit

            # Clone the repo from the original repo and push to the CodeCommit
            # remote.
            git clone ${SourceRepo}
            cd microservices
            git remote add codecommit codecommit::${AWS::Region}://${CodeCommitRepositoryName}
            git fetch --all
            git push -f -u codecommit master

            #
            # Make an initial push to the frontend service ECR repo created as
            # part of this stack.
            #

            # Install Docker.
            amazon-linux-extras install -y docker

            # Start Docker.
            service docker start

            # Authenticate to ECR.
            $(aws ecr get-login --no-include-email --region ${AWS::Region})

            # Build, tag and push.
            docker build -t frontend-svc ./src/frontend/
            docker tag frontend-svc:latest ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${FrontendServiceEcrRepoName}:latest
            docker push ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${FrontendServiceEcrRepoName}:latest
